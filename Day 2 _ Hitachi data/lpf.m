function [ dataf ] = lpf( data,ft,fs,freq_cut,Nf )% inputs ------------------------% data: data to be filtered% fs: sampling freq.% freq_cut: cut-off frequency% Nf: filter length% outputs -----------------------% dataf: filtered data%--------------------------------% lpf function designs lowpass FIR filter with the specified cut-off frequency and length.% It filters the data columnwise as its output%--------------------------------[Mini,Nini]=size(data);if Mini==1 %if the data is a row vector converts it to column vector    data=data';end[M,N]=size(data);%-----------------------------------------------------------------% Low-pass Filter design%-----------------------------------------------------------------half_fs = fs/2;    %half of sampling freq. equal to piif ft==1    [b,a] = fir1(Nf,freq_cut/half_fs);  % use FIR1 to obtain linear phase filter; b=impulse response                                     elseif ft==2    dp=0.01; %pass-band ripple    ds=0.01; %stop-band ripple    dev=[dp ds];    F=[freq_cut freq_cut+0.1*(freq_cut)];   %these are the cutoff frequencies %this frequency depends on noise frequency    MR=[1 0];    [N1, F0, M0, W]=firpmord(F, MR, dev, fs);    [b,delta]=firpm(N1, F0, M0, W);    a=1;elseif ft==3    [b,a] = butter(Nf,freq_cut/half_fs);  % use FIR1 to obtain linear phase filter; b=impulse response                                     end%-----------------------------------------------------------------% Filter the data%-----------------------------------------------------------------dataf=filtfilt(b,a,data);if Mini==1 %if the data is a row vector converts it to column vector    dataf=dataf';end